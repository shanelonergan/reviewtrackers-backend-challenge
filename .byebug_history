c
Nokogiri::HTML(URI.open(url))c
Nokogiri::HTML(URI.open(url)).keys
Nokogiri::HTML(URI.open(url)).error
Nokogiri::HTML(URI.open(url))
c
@error
@errror
!!@error
!@business_id
!@url.include?(BASE_URL)
c
@error
c
scraper.error
scraper.valid?
c
@url&.split('/')
@url&.split('/').length
@url&.split('/).length
@url&.split('/')&.last
@url&.split('/')&.last&.to_i
url_params[:url]&.split('/')&.last&.to_i
@url
@business_id
@url.include?(BASE_URL)
c
scraper.url
scraper.valid?
scraper.error
c
scraper.error
scraper.valid?
c
error
c
error
c
Review.all.where(business_id: @business_id)
Review.last
c
@business_id.to_i
@business_id
c
response.body
response
c
review.css('p.consumerName').text.strip.split.join(" "c)
review.css('p.consumerName').text.strip.split.join.(" ")
review.css('p.consumerName').text.strip.split.join
review.css('p.consumerName').text.strip.split
review.css('p.consumerName').text
review.css('p.consumerName').text.strip
review.css('p.consumerName').text.strip.split("\n")
review.css('p.consumerName').text.strip.split("\n").first.strip
review.css('p.consumerName').text.strip.split("\n").first
review.css('p.consumerName').text.strip.delete("()").split("\n").first
review.css('div.numRec').text.strip.delete("()").split("\n").first
review.css('div.numRec').text.delete("()").split("\n").first
review.css('div.numRec').text.strip.delete("()").split("\n").first
review.css('div.numRec').text.strip.delete("()").split("\n")
review.css('div.numRec').text.strip.delete("()")split("\n")
review.css('div.numRec').text.strip.split("\n")
review.css('div.numRec').text.strip.split('\n')
review.css('div.numRec').text.strip.split
review.css('div.numRec').text.strip
review.css('div.numRec').text.to_s
review.css('div.numRec').text.split('(')
review.css('div.numRec').text.split
review.css('div.numRec').text
review.css('div.numRec').texr
review.css('div.numRec').content
review.css('div.numRec').text
@url
review.css(".loanType")[1].text || ''
review.css(".loanType")[0].text || ''
review.css(".loanType")[0].text
review.css(".yes").text.to_s.empty? ? false : true
review.css(".yes").text.to_s.empty?
review.css(".consumerReviewDate").text
review.css('div.numRec > text()').text
review.css('p.consumerName > text()').text
review.css(".reviewText").text
review = reviews.first
c
reviews.first.css(".reviewTitle").text
reviews.first
c
response.status
c
response.status
response.body
response
cd
error
n
review.css(".yes").text.to_s.empty?
self.scrape_page(page_number).css(".start-rating-reviews").css(".hidden-xs")
total_reviews
total_pages
c
self.scrape_page(1).css(".col-xs-12.mainReviews")
self.scrape_page(1).css
self.scrape_page(1)
c
scraped_reviews.css
c
scraped_reviews.css
scraped_reviews
scraped_reviews.first.length
scraped_reviews.first.count
scraped_reviews.first
scraped_reviews
scaped_reviews
c
reviews = scraper.get_reviews
scraper = Scraper.new(url_params)
reviews = scraper.get_reviews
c
reviews = scraper.get_reviews
scraper = Scraper.new(url_params)
c
url_params
c
